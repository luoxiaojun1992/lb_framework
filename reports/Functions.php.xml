<?xml version="1.0"?>
<phpunit xmlns="http://schema.phpunit.de/coverage/1.0">
  <file name="Functions.php" path="/">
    <totals>
      <lines total="117" comments="28" code="89" executable="36" executed="13" percent="36.11"/>
      <methods count="0" tested="0" percent="0"/>
      <functions count="9" tested="2" percent="22.22"/>
      <classes count="0" tested="0" percent="0"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <function name="_echo" signature="_echo($var)" start="11" crap="2" executable="4" executed="4" coverage="100"/>
    <function name="config" signature="config($config_name, $default = null)" start="25" crap="6" executable="1" executed="0" coverage="0"/>
    <function name="env" signature="env($env_name, $default = null)" start="35" crap="2" executable="1" executed="1" coverage="100"/>
    <function name="file_cache" signature="file_cache($key, $value = null, $cache_time = 86400)" start="45" crap="6" executable="4" executed="0" coverage="0"/>
    <function name="redis_cache" signature="redis_cache($key, $value = null, $expiration = 0)" start="61" crap="6" executable="4" executed="0" coverage="0"/>
    <function name="memcache" signature="memcache($key, $value = null, $expiration = null)" start="75" crap="6" executable="4" executed="0" coverage="0"/>
    <function name="dd" signature="dd()" start="89" crap="2" executable="2" executed="0" coverage="0"/>
    <function name="anonymousFunction:91#511" signature="anonymousFunction($x)" start="91" crap="2" executable="2" executed="0" coverage="0"/>
    <function name="aop" signature="aop(array $callable, \Closure $closure)" start="107" crap="2" executable="6" executed="0" coverage="0"/>
    <coverage>
      <line nr="7">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="13">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="14">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="16">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="18">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="21">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="31">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="37">
        <covered by="lb\tests\components\FunctionsTest::testEnv"/>
      </line>
      <line nr="41">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="57">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="71">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="85">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
      <line nr="100">
        <covered by="lb\tests\components\FunctionsTest::testEcho"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lb</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Lb</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lb</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">components</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">consts</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">ErrorMsg</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lb</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">components</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">error_handlers</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">VariableException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_echo'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="8">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT">     * No Exception Echo</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="11">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_echo</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$var</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$var</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">            </token>
        <token name="T_ECHO">echo</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$var</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">VariableException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ErrorMsg</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">errorMsg</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">ErrorMsg</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">VARIABLE_NOT_DEFINED</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ErrorMsg</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ERROR_VARIABLE_NOT_DEFINED</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="19">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="20"/>
      <line no="21">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'config'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     * Get Configuration By Name</token>
      </line>
      <line no="24">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">config</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config_name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$default</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getConfigByName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config_name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$default</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="29">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'env'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT">     * Get Environment Value By Name</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">env</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$env_name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$default</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEnv</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$env_name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$default</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="39">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'file_cache'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     * File Cache Operations</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">file_cache</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cache_time</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">86400</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fileCacheGet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fileCacheSet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cache_time</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="52"/>
      <line no="53">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="55">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="56"/>
      <line no="57">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'redis_cache'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="59">
        <token name="T_DOC_COMMENT">     * Redis Cache Operations</token>
      </line>
      <line no="60">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">redis_cache</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">redisGet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">redisSet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="69">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'memcache'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     * Memcache Operations</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">memcache</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">memcacheGet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">memcacheSet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="83">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'dd'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * Dump data</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">dd</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$x</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">dump</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$x</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">func_get_args</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95"/>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">stop</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="98">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="99"/>
      <line no="100">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">function_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'aop'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * AOP Register</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="104">
        <token name="T_DOC_COMMENT">     * @param array $callable</token>
      </line>
      <line no="105">
        <token name="T_DOC_COMMENT">     * @param Closure $closure</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">aop</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$callable</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Closure</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$closure</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @var \lb\components\listeners\AopListener $aopListener */</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$aopListener</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">lb</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">components</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">listeners</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">AopListener</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">component</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">Lb</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">app</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">on</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">lb</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">components</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">consts</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Event</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">AOP_EVENT</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'@'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$callable</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$aopListener</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'closure'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$closure</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="117">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="118"/>
    </source>
  </file>
</phpunit>
